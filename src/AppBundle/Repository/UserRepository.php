<?php
/**
 * Created by PhpStorm.
 * User: steve
 * Date: 17-06-2017
 * Time: 22:50
 */

namespace AppBundle\Repository;


use Doctrine\Common\Cache\PredisCache;
use Doctrine\ORM\EntityRepository;
use Predis\Client;
use Symfony\Component\Config\Definition\Exception\Exception;


class UserRepository extends EntityRepository implements RepositoryInterface
{
    public function find($id, $lockMode = null, $lockVersion = null)
    {

        return parent::find($id, $lockMode, $lockVersion); // TODO: Change the autogenerated stub
    }

    public function findAll()
    {
        $predis = new PredisCache(new Client());


        $cacheLifeTime = 300;

        try {

            $qb = $this->createQueryBuilder('u')
                ->getQuery()
                ->setResultCacheDriver($predis)
                ->setResultCacheLifetime($cacheLifeTime);

        } catch (\Exception $e) {

            throw new Exception($e->getMessage());
        }

        return $qb->getArrayResult();
    }

    public function findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return parent::findBy($criteria, $orderBy, $limit, $offset); // TODO: Change the autogenerated stub
    }

    public function findOneBy(array $criteria, array $orderBy = null)
    {
        return parent::findOneBy($criteria, $orderBy); // TODO: Change the autogenerated stub
    }
}